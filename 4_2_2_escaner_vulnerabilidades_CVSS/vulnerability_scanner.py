import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor


class VulnerabilityScanner:
    """Escáner de vulnerabilidades que busca y muestra información sobre CVEs.

    Attributes:
        headers (dict): Cabeceras de la solicitud HTTP para simular un navegador.
    """

    def __init__(self):
        """Inicializa el escáner con las cabeceras HTTP predefinidas."""
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
        }

    def search_cves(self, service):
        """Busca CVEs basados en un servicio específico.

        Args:
            service (str): El servicio para buscar vulnerabilidades relacionadas.

        Returns:
            list: Lista de diccionarios con información sobre cada CVE o mensaje de error.
        """
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={service}"
        response = requests.get(url, headers=self.headers)

        if response.status_code != 200:
            return "No se pudo obtener información de las vulnerabilidades"
        
        data_dict = response.json()
        cves_info = []

        for vulnerability in data_dict['vulnerabilities']:
            cve_id = vulnerability['cve']['id']
            descriptions = vulnerability['cve']['descriptions']
            description = next((desc['value'] for desc in descriptions if desc['lang'] == 'es'), None)
            cves_info.append({'cve_id': cve_id, 'description': description})
        
        with ThreadPoolExecutor(max_workers=20) as executor:
            executor.map(self.search_cve_details, cves_info)

        return cves_info

    def search_cve_details(self, cve_info):
        """Añade detalles adicionales a la información del CVE.

        Args:
            cve_info (dict): Información básica del CVE incluyendo id y descripción.
        """
        cve_details_url = f"https://www.cvedetails.com/cve/{cve_info['cve_id']}/"
        response = requests.get(cve_details_url, headers=self.headers)

        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            cvss_info = soup.find('div', {'class': 'cvssbox'})
            cve_info['cvss'] = cvss_info.get_text().strip() if cvss_info else 'No disponible'
            cve_info['url'] = cve_details_url